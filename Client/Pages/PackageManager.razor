@page "/packagemanager"

@using WingetNexus.Client.Modals
@using WingetNexus.Shared.Models
@using WingetNexus.Shared.Models.Dtos

@attribute [Authorize]
@* @attribute [RenderModeInteractiveAuto] *@

@inject IAntiforgeryHttpClientFactory httpClientFactory

@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager


<MudPaper Elevation="25" Class="ma-4">
    <MudToolBar>
        <MudText Typo="Typo.h6">Winget Applications</MudText>
        <MudChip>@packages.Count() application(s)</MudChip>
        @* <MudChip>@packages.Select(p=>p.Versions).Count() versions(s)</MudChip> *@
        <MudSpacer />
        <MudButton @onclick="OpenDialogQuickAdd" Variant="Variant.Filled" Color="Color.Primary">Add new application</MudButton>
        @* <MudButton @onclick="OpenNew" Variant="Variant.Filled" Color="Color.Primary">Add new package</MudButton> *@
    </MudToolBar>
</MudPaper>

@* @if (noPackage)
{
    <MudText Class="mt-1">No package found</MudText>
}
else
{ *@

    <MudDataGrid Elevation="25" Class="ma-4" Loading=@isLoading FixedHeader="true" ServerData="LoadGridData" T="PackageDto" @ref="_dataGrid" >
        <NoRecordsContent>
            <MudText Class="mt-1">No application found</MudText>
        </NoRecordsContent>
        <ToolBarContent>
                <MudTextField @bind-Value="_requestDto.SearchTerm" Placeholder="Search for applications..." Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudIconButton Size="@Size.Small" Color="Color.Primary" Icon="@Icons.Material.Outlined.Search" OnClick="@Search" />
            
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Publisher" />
            <PropertyColumn Property="x => x.Name" />
            <PropertyColumn Property="x => x.Identifier" />
            <PropertyColumn Property="x => x.Versions" Title="Latest version">
                <CellTemplate>
                    @context.Item.Versions.OrderByDescending(p => p.DateAdded).FirstOrDefault()?.VersionCode
                </CellTemplate>
            </PropertyColumn>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Color="Color.Primary" Icon="@Icons.Material.Outlined.Edit" @onclick="@(()=>OpenDialogUpdate(@context.Item))" />
                    <MudIconButton Size="@Size.Small" Color="Color.Secondary" Icon="@Icons.Material.Outlined.Delete" @onclick="@(()=>Delete(@context.Item.Identifier))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="PackageDto" />
        </PagerContent>
    </MudDataGrid>
    
@* } *@
    

@code {

    public class GridDataRequestDto
    {
        public string? SearchTerm { get; set; } = null;
        public int Page { get; set; } = 0; // The page number for the data we're requesting
        public int PageSize { get; set; } = 10; // The number of items per page
    }

    public class PackageListDto
    {
        public IEnumerable<PackageDto> Items { get; set; }
        public int ItemTotalCount { get; set; } = 0; // The total count of items before paging
    }

    private MudDataGrid<PackageDto>? _dataGrid;

    private string searchString = "";
    private IEnumerable<PackageDto> packages = new List<PackageDto>();
    private bool isLoading = false;
    private bool noPackage = false;

    HttpClient client = null;

    private GridDataRequestDto _requestDto = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);

        if (client == null)
        {
            client = await httpClientFactory.CreateClientAsync();
        }

        //await GetPackages();
    }

    private async Task<GridData<PackageDto>> LoadGridData(GridState<PackageDto> state)
    {
        _requestDto.Page = state.Page;
        _requestDto.PageSize = state.PageSize;

        PackageListDto apiResponse = await GetPackagesFiltered(_requestDto);
        if (apiResponse == null || apiResponse.Items == null)
        {
            return new GridData<PackageDto>();
        }

        GridData<PackageDto> data = new()
            {
                Items = apiResponse.Items,
                TotalItems = apiResponse.ItemTotalCount
            };

        StateHasChanged();

        return data;
    }

    private async Task Search()
    {
        if (_dataGrid is not null)
        {
            await _dataGrid!.ReloadServerData();
        }
    }

    private async Task<PackageListDto> GetPackagesFiltered(GridDataRequestDto request)
    {
        isLoading = true;
        StateHasChanged();
        var result = new PackageListDto();

        try
        {
            using (client = await httpClientFactory.CreateClientAsync())
            {
                HttpResponseMessage? res = null;

                if (string.IsNullOrEmpty(request.SearchTerm))
                {
                    res = await client.GetAsync($"api/v1/packages/page/{request.Page}/size/{request.PageSize}");
                }
                else
                {
                    res = await client.GetAsync($"api/v1/packages/page/{request.Page}/size/{request.PageSize}/search/{request.SearchTerm}");
                }
                
                if (!res.IsSuccessStatusCode)
                {
                    snackBar.Add(res.ReasonPhrase, Severity.Error);
                }
                else
                {

                    result.Items = await res?.Content?.ReadFromJsonAsync<IEnumerable<PackageDto>>();
                    result.ItemTotalCount = int.Parse(res.Headers.GetValues("X-Total-Count").FirstOrDefault());
                    if (result.Items == null || result.Items.Count() == 0)
                    {
                        noPackage = true;
                    }
                    else
                    {
                        noPackage = false;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackBar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            isLoading = false;
        }

        return result;
    }

    private void OpenNew()
    {
        NavigationManager.NavigateTo("/packageEdit");
    }

    private void OpenDialogUpdate(PackageDto package)
    {
        NavigationManager.NavigateTo("/packageEdit/" + package.Identifier);
    }

    private async Task OpenDialogQuickAdd()
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<AddPackage>("Add a new application with a version", options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var data = result.Data as PackageDto;
            using (client = await httpClientFactory.CreateClientAsync())
            {
                var res = await client.PostAsJsonAsync($"api/v1/packages", data);

                if (!res.IsSuccessStatusCode)
                {
                    var error = await res.Content.ReadAsStringAsync();
                    snackBar.Add(error, Severity.Error);
                }
                else
                {
                    snackBar.Add("Application added successfully.", Severity.Success);
                    //await GetPackages();
                    await _dataGrid.ReloadServerData();
                }
            }
        }
    }

    private async void Delete(string id)
    {
        bool? confirm = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");
        if (confirm == true)
        {
            using (client = await httpClientFactory.CreateClientAsync())
            {
                var res = await client.DeleteAsync($"api/v1/packages/{id}");
                if (!res.IsSuccessStatusCode)
                {
                    snackBar.Add(res.ReasonPhrase, Severity.Error);
                }
                else
                {
                    snackBar.Add("Application fully deleted", Severity.Success);

                    //await GetPackages();

                    await _dataGrid.ReloadServerData();
                }
            }

        }
    }

}
