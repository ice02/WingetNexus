//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace WingetNexus.Shared.Models.Winget._1._7
{
    using System = global::System;

    /// <summary>
    /// List of additional package search terms
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tags : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// One Agreement entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Agreement
    {
        /// <summary>
        /// The label of the Agreement. i.e. EULA, AgeRating, etc. This field should be localized. Either Agreement or AgreementUrl is required. When we show the agreements, we would Bold the AgreementL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string AgreementLabel { get; set; }

        /// <summary>
        /// The agreement text content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Agreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10000, MinimumLength = 1)]
        public string Agreement1 { get; set; }

        /// <summary>
        /// The agreement url.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([Hh][Tt][Tt][Pp][Ss]?)://")]
        public string AgreementUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of agreements. Agreements are shown in the order of this list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Agreements : System.Collections.ObjectModel.Collection<Agreement>
    {

    }

    /// <summary>
    /// One Documentation entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Documentation
    {
        /// <summary>
        /// The label of the documentation for providing software guides such as manuals and troubleshooting URLs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DocumentLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string DocumentLabel { get; set; }

        /// <summary>
        /// The documentation url.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DocumentUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([Hh][Tt][Tt][Pp][Ss]?)://")]
        public string DocumentUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of documentations. Documentations are shown in the order of this list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Documentations : System.Collections.ObjectModel.Collection<Documentation>
    {

    }

    /// <summary>
    /// One Icon entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Icon
    {
        /// <summary>
        /// The icon url.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IconUrl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([Hh][Tt][Tt][Pp][Ss]?)://")]
        public string IconUrl { get; set; }

        /// <summary>
        /// The icon file type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IconFileType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IconFileType IconFileType { get; set; }

        /// <summary>
        /// The optional icon resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IconResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IconResolution? IconResolution { get; set; }

        /// <summary>
        /// The optional icon theme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IconTheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IconTheme? IconTheme { get; set; }

        /// <summary>
        /// The optional Sha256 of the icon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IconSha256", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Fa-f0-9]{64}$")]
        public string IconSha256 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of icons.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Icons : System.Collections.ObjectModel.Collection<Icon>
    {

    }

    /// <summary>
    /// The installer supported operating system
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Platform : System.Collections.ObjectModel.Collection<Anonymous>
    {

    }

    /// <summary>
    /// Enumeration of supported nested installer types contained inside an archive file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NestedInstallerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"msix")]
        Msix = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"msi")]
        Msi = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"appx")]
        Appx = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"exe")]
        Exe = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"inno")]
        Inno = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"nullsoft")]
        Nullsoft = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"wix")]
        Wix = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"burn")]
        Burn = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"portable")]
        Portable = 8,

    }

    /// <summary>
    /// Enumeration of supported installer types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InstallerType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"msix")]
        Msix = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"msi")]
        Msi = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"appx")]
        Appx = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"exe")]
        Exe = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"inno")]
        Inno = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"nullsoft")]
        Nullsoft = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"wix")]
        Wix = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"burn")]
        Burn = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"portable")]
        Portable = 8,
    }

    /// <summary>
    /// Enumeration of Values for Scope
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Scope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"machine")]
        Machine = 1,

    }

    /// <summary>
    /// Enumeration of Values for InstallModes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InstallMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"interactive")]
        Interactive = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"silent")]
        Silent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"silentWithProgress")]
        SilentWithProgress = 2,

    }

    /// <summary>
    /// List of supported installer modes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallModes : System.Collections.ObjectModel.Collection<InstallMode?>
    {

    }

    /// <summary>
    /// A Package Dependency consists of a Package Identifier and an optional Minimum Version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageDependency
    {
        [Newtonsoft.Json.JsonProperty("Package", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[^\.\s\\/:\*\?""<>\|\x01-\x1f]{1,32}(\.[^\.\s\\/:\*\?""<>\|\x01-\x1f]{1,32}){1,7}$")]
        public string PackageIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("MinimumVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[^\\/:\*\?""<>\|\x01-\x1f]+$")]
        public string MinimumVersion { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Installer Switches
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallerSwitches
    {
        /// <summary>
        /// Silent is the value that should be passed to the installer when user chooses a silent or quiet install
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Silent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
        public string Silent { get; set; }

        /// <summary>
        /// SilentWithProgress is the value that should be passed to the installer when user chooses a non-interactive install
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SilentWithProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
        public string SilentWithProgress { get; set; }

        /// <summary>
        /// Interactive is the value that should be passed to the installer when user chooses an interactive install
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Interactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
        public string Interactive { get; set; }

        /// <summary>
        /// InstallLocation is the value passed to the installer for custom install location. `&lt;INSTALLPATH`&gt; token can be included in the switch value so that winget will replace the token with user provided path
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstallLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
        public string InstallLocation { get; set; }

        /// <summary>
        /// Log is the value passed to the installer for custom log file path. &lt;LOGPATH&gt; token can be included in the switch value so that winget will replace the token with user provided path
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Log", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
        public string Log { get; set; }

        /// <summary>
        /// Upgrade is the value that should be passed to the installer when user chooses an upgrade
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Upgrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
        public string Upgrade { get; set; }

        /// <summary>
        /// Custom switches will be passed directly to the installer by winget
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Custom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength = 1)]
        public string Custom { get; set; }

        /// <summary>
        /// The Repair value will be passed to the installer, ModifyPath ARP command, or uninstaller ARP command when the user opts for a repair
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Repair", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
        public string Repair { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of supported installer modes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallerSuccessCodes : System.Collections.ObjectModel.Collection<long>
    {

    }

    /// <summary>
    /// Installer exit codes for common errors. Should contain unique installer return codes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpectedReturnCodes : System.Collections.ObjectModel.Collection<ExpectedReturnCode>
    {

    }

    /// <summary>
    /// Installer expected return code response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExpectedReturnCodeResponse
    {

        [System.Runtime.Serialization.EnumMember(Value = @"packageInUse")]
        PackageInUse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"packageInUseByApplication")]
        PackageInUseByApplication = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"installInProgress")]
        InstallInProgress = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"fileInUse")]
        FileInUse = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"missingDependency")]
        MissingDependency = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"diskFull")]
        DiskFull = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"insufficientMemory")]
        InsufficientMemory = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"invalidParameter")]
        InvalidParameter = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"noNetwork")]
        NoNetwork = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"contactSupport")]
        ContactSupport = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"rebootRequiredToFinish")]
        RebootRequiredToFinish = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"rebootRequiredForInstall")]
        RebootRequiredForInstall = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"rebootInitiated")]
        RebootInitiated = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"cancelledByUser")]
        CancelledByUser = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"alreadyInstalled")]
        AlreadyInstalled = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"downgrade")]
        Downgrade = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"blockedByPolicy")]
        BlockedByPolicy = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"systemNotSupported")]
        SystemNotSupported = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 18,

    }

    /// <summary>
    /// Installer exit code for a common error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpectedReturnCode
    {
        [Newtonsoft.Json.JsonProperty("InstallerReturnCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-2147483648D, 4294967295D)]
        public long InstallerReturnCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ReturnResponse", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExpectedReturnCodeResponse ReturnResponse { get; set; }

        /// <summary>
        /// The return response url to provide additional guidance for expected return codes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReturnResponseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([Hh][Tt][Tt][Pp][Ss]?)://")]
        public string ReturnResponseUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The upgrade method
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UpgradeBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"install")]
        Install = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"uninstallPrevious")]
        UninstallPrevious = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"deny")]
        Deny = 2,

    }

    /// <summary>
    /// List of commands or aliases to run the package
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Commands : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// List of protocols the package provides a handler for
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Protocols : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// List of file extensions the package could support
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileExtensions : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// List of dependencies
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dependencies
    {
        /// <summary>
        /// List of Windows feature dependencies
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WindowsFeatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(16)]
        public System.Collections.Generic.List<string> WindowsFeatures { get; set; }

        /// <summary>
        /// List of Windows library dependencies
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WindowsLibraries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(16)]
        public System.Collections.Generic.List<string> WindowsLibraries { get; set; }

        /// <summary>
        /// List of package dependencies from current source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PackageDependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(16)]
        public System.Collections.Generic.List<PackageDependency> PackageDependencies { get; set; }

        /// <summary>
        /// List of external package dependencies
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExternalDependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(16)]
        public System.Collections.Generic.List<string> ExternalDependencies { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of appx or msix installer capabilities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Capabilities : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// List of appx or msix installer restricted capabilities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RestrictedCapabilities : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// The installer target architecture.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArchitectureNonNeutral
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Array of markets.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketArray : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// The installer markets
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Markets
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The installer's elevation requirement.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ElevationRequirement
    {

        [System.Runtime.Serialization.EnumMember(Value = @"elevationRequired")]
        ElevationRequired = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"elevationProhibited")]
        ElevationProhibited = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"elevatesSelf")]
        ElevatesSelf = 2,

    }

    /// <summary>
    /// List of OS architectures the installer does not support.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnsupportedOSArchitectures : System.Collections.ObjectModel.Collection<ArchitectureNonNeutral>
    {

    }

    /// <summary>
    /// Various key values under installer's ARP entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppsAndFeaturesEntry
    {
        /// <summary>
        /// The DisplayName registry value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The Publisher registry value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Publisher { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string DisplayVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string ProductCode { get; set; }

        [Newtonsoft.Json.JsonProperty("UpgradeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string UpgradeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("InstallerType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstallerType InstallerType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of ARP entries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppsAndFeaturesEntries : System.Collections.ObjectModel.Collection<AppsAndFeaturesEntry>
    {

    }

    /// <summary>
    /// One nested installer file entry inside an archive.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NestedInstallerFile
    {
        /// <summary>
        /// The relative path to the nested installer file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RelativeFilePath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
        public string RelativeFilePath { get; set; }

        /// <summary>
        /// The command alias to be used for calling the package. Only applies to the nested portable package
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PortableCommandAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string PortableCommandAlias { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List nested installer files inside an archive.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NestedInstallerFiles : System.Collections.ObjectModel.Collection<NestedInstallerFile>
    {

    }

    /// <summary>
    /// One winget argument the installer does not support.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UnsupportedArgument
    {

        [System.Runtime.Serialization.EnumMember(Value = @"log")]
        Log = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"location")]
        Location = 1,

    }

    /// <summary>
    /// List of winget arguments the installer does not support.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnsupportedArguments : System.Collections.ObjectModel.Collection<UnsupportedArgument>
    {

    }

    /// <summary>
    /// One installed file info.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallationMetadataFile
    {
        /// <summary>
        /// The relative path to the installed file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RelativeFilePath", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength = 1)]
        public string RelativeFilePath { get; set; }

        /// <summary>
        /// Optional Sha256 of the installed file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileSha256", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Fa-f0-9]{64}$")]
        public string FileSha256 { get; set; }

        /// <summary>
        /// The optional installed file type. If not specified, the file is treated as other.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstallationMetadataFileFileType? FileType { get; set; }

        /// <summary>
        /// Optional parameter for invocable files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InvocationParameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength = 1)]
        public string InvocationParameter { get; set; }

        /// <summary>
        /// Optional display name for the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string DisplayName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the installation. Used for deeper installation detection.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallationMetadata
    {
        /// <summary>
        /// Represents the default installed package location. Used for deeper installation detection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DefaultInstallLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength = 1)]
        public string DefaultInstallLocation { get; set; }

        /// <summary>
        /// List of installed files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(2048)]
        public System.Collections.Generic.List<InstallationMetadataFile> Files { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The repair method
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RepairBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"modify")]
        Modify = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"uninstaller")]
        Uninstaller = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"installer")]
        Installer = 2,

    }

    /// <summary>
    /// The source agreements users must accept before using the source.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SourceAgreements
    {
        [Newtonsoft.Json.JsonProperty("AgreementsIdentifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string AgreementsIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("Agreements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(128)]
        public Agreements Agreements { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The API Versions supported by the server.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServerSupportedVersions : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// The Package Match Fields not supported by the server.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageMatchFieldArray : System.Collections.ObjectModel.Collection<PackageMatchField>
    {

    }

    /// <summary>
    /// The query parameter not supported by the server.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueryParameterArray : System.Collections.ObjectModel.Collection<Anonymous2>
    {

    }

    /// <summary>
    /// The authentication requirement from the server. Information endpoint should not require authentication.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Authentication
    {
        /// <summary>
        /// The authentication type required by the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthenticationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthenticationType AuthenticationType { get; set; }

        /// <summary>
        /// The Microsoft Entra Id authentication requirement from the server if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MicrosoftEntraIdAuthenticationInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MicrosoftEntraIdAuthenticationInfo MicrosoftEntraIdAuthenticationInfo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    public enum Architecture
    {
        [System.Runtime.Serialization.EnumMember(Value = @"x86")]
        X86 = 0,
        [System.Runtime.Serialization.EnumMember(Value = @"x64")]
        X64 = 1,
        [System.Runtime.Serialization.EnumMember(Value = @"Arm")]
        Arm = 2,
        [System.Runtime.Serialization.EnumMember(Value = @"Arm64")]
        Arm64 = 3,
        [System.Runtime.Serialization.EnumMember(Value = @"Neutral")]
        Neutral = 4,
    }

    /// <summary>
    /// Installer. If InstallerType is msstore, MSStoreProductIdentifier is required. In other cases, InstallerUrl and InstallerSha256 are required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Installer
    {
        [Newtonsoft.Json.JsonProperty("InstallerIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string InstallerIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("InstallerSha256", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Fa-f0-9]{64}$")]
        public string InstallerSha256 { get; set; }

        [Newtonsoft.Json.JsonProperty("InstallerUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([Hh][Tt][Tt][Pp][Ss]?)://")]
        public string InstallerUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("Architecture", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Architecture Architecture { get; set; }

        [Newtonsoft.Json.JsonProperty("InstallerLocale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([a-zA-Z]{2}|[iI]-[a-zA-Z]+|[xX]-[a-zA-Z]{1,8})(-[a-zA-Z]{1,8})*$")]
        public string InstallerLocale { get; set; }

        [Newtonsoft.Json.JsonProperty("Platform", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Platform Platform { get; set; }

        [Newtonsoft.Json.JsonProperty("MinimumOSVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(0|[1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])(\.(0|[1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])){0,3}$")]
        public string MinimumOSVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("InstallerType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstallerType InstallerType { get; set; }

        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Scope? Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("SignatureSha256", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Fa-f0-9]{64}$")]
        public string SignatureSha256 { get; set; }

        [Newtonsoft.Json.JsonProperty("InstallModes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(3)]
        public InstallModes InstallModes { get; set; }

        [Newtonsoft.Json.JsonProperty("InstallerSwitches", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstallerSwitches InstallerSwitches { get; set; }

        [Newtonsoft.Json.JsonProperty("InstallerSuccessCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(16)]
        public InstallerSuccessCodes InstallerSuccessCodes { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpectedReturnCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(128)]
        public ExpectedReturnCodes ExpectedReturnCodes { get; set; }

        [Newtonsoft.Json.JsonProperty("UpgradeBehavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpgradeBehavior? UpgradeBehavior { get; set; }

        [Newtonsoft.Json.JsonProperty("Commands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(16)]
        public Commands Commands { get; set; }

        [Newtonsoft.Json.JsonProperty("Protocols", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(64)]
        public Protocols Protocols { get; set; }

        [Newtonsoft.Json.JsonProperty("FileExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(512)]
        public FileExtensions FileExtensions { get; set; }

        [Newtonsoft.Json.JsonProperty("Dependencies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dependencies Dependencies { get; set; }

        [Newtonsoft.Json.JsonProperty("PackageFamilyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Za-z0-9][-\.A-Za-z0-9]+_[A-Za-z0-9]{13}$")]
        public string PackageFamilyName { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string ProductCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Capabilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(1000)]
        public Capabilities Capabilities { get; set; }

        [Newtonsoft.Json.JsonProperty("RestrictedCapabilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(1000)]
        public RestrictedCapabilities RestrictedCapabilities { get; set; }

        [Newtonsoft.Json.JsonProperty("MSStoreProductIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Za-z0-9]{12}$")]
        public string MSStoreProductIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("InstallerAbortsTerminal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InstallerAbortsTerminal { get; set; }

        [Newtonsoft.Json.JsonProperty("ReleaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ReleaseDate { get; set; }

        [Newtonsoft.Json.JsonProperty("InstallLocationRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InstallLocationRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("RequireExplicitUpgrade", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RequireExplicitUpgrade { get; set; }

        [Newtonsoft.Json.JsonProperty("ElevationRequirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ElevationRequirement? ElevationRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("UnsupportedOSArchitectures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UnsupportedOSArchitectures UnsupportedOSArchitectures { get; set; }

        [Newtonsoft.Json.JsonProperty("AppsAndFeaturesEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(128)]
        public AppsAndFeaturesEntries AppsAndFeaturesEntries { get; set; }

        [Newtonsoft.Json.JsonProperty("Markets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Markets Markets { get; set; }

        [Newtonsoft.Json.JsonProperty("NestedInstallerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NestedInstallerType? NestedInstallerType { get; set; }

        [Newtonsoft.Json.JsonProperty("NestedInstallerFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(1024)]
        public NestedInstallerFiles NestedInstallerFiles { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayInstallWarnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisplayInstallWarnings { get; set; }

        [Newtonsoft.Json.JsonProperty("UnsupportedArguments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UnsupportedArguments UnsupportedArguments { get; set; }

        [Newtonsoft.Json.JsonProperty("InstallationMetadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstallationMetadata InstallationMetadata { get; set; }

        [Newtonsoft.Json.JsonProperty("DownloadCommandProhibited", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DownloadCommandProhibited { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Model containing Package Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageSchema : Anonymous3
    {

    }

    /// <summary>
    /// Model containing Version Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionSchema : Anonymous4
    {
        [Newtonsoft.Json.JsonProperty("DefaultLocale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DefaultLocale DefaultLocale { get; set; }

        [Newtonsoft.Json.JsonProperty("Channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string Channel { get; set; }

    }

    /// <summary>
    /// Model containing Locale Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocaleSchema : Anonymous5
    {
        [Newtonsoft.Json.JsonProperty("Publisher", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 2)]
        public string Publisher { get; set; }

        /// <summary>
        /// The publisher home page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PublisherUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([Hh][Tt][Tt][Pp][Ss]?)://")]
        public string PublisherUrl { get; set; }

        /// <summary>
        /// The publisher support page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PublisherSupportUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([Hh][Tt][Tt][Pp][Ss]?)://")]
        public string PublisherSupportUrl { get; set; }

        /// <summary>
        /// The privacy page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PrivacyUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([Hh][Tt][Tt][Pp][Ss]?)://")]
        public string PrivacyUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("Author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 2)]
        public string Author { get; set; }

        [Newtonsoft.Json.JsonProperty("PackageName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 2)]
        public string PackageName { get; set; }

        /// <summary>
        /// The package home page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PackageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([Hh][Tt][Tt][Pp][Ss]?)://")]
        public string PackageUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("License", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 3)]
        public string License { get; set; }

        /// <summary>
        /// The license page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LicenseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([Hh][Tt][Tt][Pp][Ss]?)://")]
        public string LicenseUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("Copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 3)]
        public string Copyright { get; set; }

        /// <summary>
        /// The package copyright page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CopyrightUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([Hh][Tt][Tt][Pp][Ss]?)://")]
        public string CopyrightUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("ShortDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 3)]
        public string ShortDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10000, MinimumLength = 3)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(16)]
        public Tags Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("ReleaseNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10000, MinimumLength = 1)]
        public string ReleaseNotes { get; set; }

        /// <summary>
        /// The release notes page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReleaseNotesUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([Hh][Tt][Tt][Pp][Ss]?)://")]
        public string ReleaseNotesUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("Agreements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(128)]
        public Agreements Agreements { get; set; }

        /// <summary>
        /// The purchase url for acquiring entitlement for the package
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PurchaseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2048)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([Hh][Tt][Tt][Pp][Ss]?)://")]
        public string PurchaseUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("InstallationNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string InstallationNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("Documentations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(256)]
        public Documentations Documentations { get; set; }

        [Newtonsoft.Json.JsonProperty("Icons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(1024)]
        public Icons Icons { get; set; }

    }

    /// <summary>
    /// Model containing DefaultLocale Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DefaultLocale : LocaleSchema
    {
        /// <summary>
        /// The most common package term. Can only be used in default locale.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Moniker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\S+$")]
        public string Moniker { get; set; }

    }

    /// <summary>
    /// Model containing Manifest Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManifestSchema : PackageSchema
    {
        [Newtonsoft.Json.JsonProperty("Versions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Versions> Versions { get; set; }

    }

    /// <summary>
    /// Model containing version schema used by Manifest Search Response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManifestSearchVersionSchema : Anonymous6
    {
        [Newtonsoft.Json.JsonProperty("Channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string Channel { get; set; }

        [Newtonsoft.Json.JsonProperty("PackageFamilyNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> PackageFamilyNames { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ProductCodes { get; set; }

        [Newtonsoft.Json.JsonProperty("AppsAndFeaturesEntryVersions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AppsAndFeaturesEntryVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("UpgradeCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> UpgradeCodes { get; set; }

    }

    /// <summary>
    /// Model containing Manifest Search Response Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManifestSearchResponseSchema : PackageSchema
    {
        [Newtonsoft.Json.JsonProperty("PackageName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 2)]
        public string PackageName { get; set; }

        [Newtonsoft.Json.JsonProperty("Publisher", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 2)]
        public string Publisher { get; set; }

        [Newtonsoft.Json.JsonProperty("Versions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.List<ManifestSearchVersionSchema> Versions { get; set; }

    }

    /// <summary>
    /// Server Information Schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InformationSchema : Anonymous7
    {
        [Newtonsoft.Json.JsonProperty("SourceAgreements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceAgreements SourceAgreements { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerSupportedVersions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public ServerSupportedVersions ServerSupportedVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("UnsupportedPackageMatchFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageMatchFieldArray UnsupportedPackageMatchFields { get; set; }

        [Newtonsoft.Json.JsonProperty("RequiredPackageMatchFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageMatchFieldArray RequiredPackageMatchFields { get; set; }

        [Newtonsoft.Json.JsonProperty("UnsupportedQueryParameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QueryParameterArray UnsupportedQueryParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("RequiredQueryParameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QueryParameterArray RequiredQueryParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("Authentication", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authentication Authentication { get; set; }

    }

    /// <summary>
    /// Base API Response Object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseObjectSchema
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Data { get; set; }

        [Newtonsoft.Json.JsonProperty("ContinuationToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        public string ContinuationToken { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Package Response Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageMultipleResponseSchema : ResponseObjectSchema
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PackageSchema> Data { get; set; }

    }

    /// <summary>
    /// Package Response Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageSingleResponseSchema : ResponseObjectSchema
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageSchema Data { get; set; }

    }

    /// <summary>
    /// Version Response Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionMultipleResponseSchema : ResponseObjectSchema
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<VersionSchema> Data { get; set; }

    }

    /// <summary>
    /// Version Response Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionSingleResponseSchema : ResponseObjectSchema
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VersionSchema Data { get; set; }

    }

    /// <summary>
    /// Locale Response Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocaleMultipleResponseSchema : ResponseObjectSchema
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LocaleSchema> Data { get; set; }

    }

    /// <summary>
    /// Locale Response Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocaleSingleResponseSchema : ResponseObjectSchema
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocaleSchema Data { get; set; }

    }

    /// <summary>
    /// Installer Response Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallerMultipleResponseSchema : ResponseObjectSchema
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(1024)]
        public System.Collections.Generic.List<Installer> Data { get; set; }

    }

    /// <summary>
    /// Installer Response Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallerSingleResponseSchema : ResponseObjectSchema
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Installer Data { get; set; }

    }

    /// <summary>
    /// Manifest Response Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManifestMultipleResponseSchema : ResponseObjectSchema
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ManifestSchema> Data { get; set; }

    }

    /// <summary>
    /// Manifest Response Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManifestSingleResponseSchema : ResponseObjectSchema
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManifestSchema Data { get; set; }

        [Newtonsoft.Json.JsonProperty("UnsupportedQueryParameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QueryParameterArray UnsupportedQueryParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("RequiredQueryParameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QueryParameterArray RequiredQueryParameters { get; set; }

    }

    /// <summary>
    /// Manifest Response Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InformationResponseSchema : ResponseObjectSchema
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InformationSchema Data { get; set; }

    }

    /// <summary>
    /// Package Search Result Schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManifestSearchResultSchema : ResponseObjectSchema
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ManifestSearchResponseSchema> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("RequiredPackageMatchFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageMatchFieldArray RequiredPackageMatchFields { get; set; }

        [Newtonsoft.Json.JsonProperty("UnsupportedPackageMatchFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageMatchFieldArray UnsupportedPackageMatchFields { get; set; }

    }

    /// <summary>
    /// Model containing manifest request match type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MatchType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Exact")]
        Exact = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CaseInsensitive")]
        CaseInsensitive = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"StartsWith")]
        StartsWith = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Substring")]
        Substring = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Wildcard")]
        Wildcard = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Fuzzy")]
        Fuzzy = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FuzzySubstring")]
        FuzzySubstring = 6,

    }

    /// <summary>
    /// Model containing manifest request package match field schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PackageMatchField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        PackageIdentifier = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageName")]
        PackageName = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Moniker")]
        Moniker = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Command")]
        Command = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Tag")]
        Tag = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageFamilyName")]
        PackageFamilyName = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductCode")]
        ProductCode = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NormalizedPackageNameAndPublisher")]
        NormalizedPackageNameAndPublisher = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Market")]
        Market = 8,

    }

    /// <summary>
    /// Model containing manifest request match schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchRequestMatch : Anonymous8
    {

    }

    /// <summary>
    /// Model containing manifest search request Package Match Filter schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchRequestPackageMatchFilterSchema
    {
        [Newtonsoft.Json.JsonProperty("PackageMatchField", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageMatchField PackageMatchField { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestMatch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchRequestMatch RequestMatch { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Model containing manifest search request schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManifestSearchRequestSchema
    {
        [Newtonsoft.Json.JsonProperty("MaximumResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaximumResults { get; set; }

        [Newtonsoft.Json.JsonProperty("FetchAllManifests", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FetchAllManifests { get; set; }

        [Newtonsoft.Json.JsonProperty("Query", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchRequestMatch Query { get; set; }

        [Newtonsoft.Json.JsonProperty("Inclusions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SearchRequestPackageMatchFilterSchema> Inclusions { get; set; }

        [Newtonsoft.Json.JsonProperty("Filters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SearchRequestPackageMatchFilterSchema> Filters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A schema for a generic error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Always)]
        public int ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorMessage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ErrorMessage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IconFileType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"png")]
        Png = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"jpeg")]
        Jpeg = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ico")]
        Ico = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IconResolution
    {

        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"16x16")]
        _16x16 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"20x20")]
        _20x20 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"24x24")]
        _24x24 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"30x30")]
        _30x30 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"32x32")]
        _32x32 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"36x36")]
        _36x36 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"40x40")]
        _40x40 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"48x48")]
        _48x48 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"60x60")]
        _60x60 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"64x64")]
        _64x64 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"72x72")]
        _72x72 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"80x80")]
        _80x80 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"96x96")]
        _96x96 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"256x256")]
        _256x256 = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IconTheme
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"light")]
        Light = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dark")]
        Dark = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"highContrast")]
        HighContrast = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Windows.Desktop")]
        Windows_Desktop = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Windows.Universal")]
        Windows_Universal = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InstallationMetadataFileFileType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"launch")]
        Launch = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"uninstall")]
        Uninstall = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Version")]
        Version = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Channel")]
        Channel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Market")]
        Market = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AuthenticationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"microsoftEntraId")]
        MicrosoftEntraId = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MicrosoftEntraIdAuthenticationInfo
    {
        /// <summary>
        /// The resource value for Microsoft Entra Id authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Resource", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
        public string Resource { get; set; }

        /// <summary>
        /// The optional scope value for Microsoft Entra Id authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
        public string Scope { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous3
    {
        [Newtonsoft.Json.JsonProperty("Package", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[^\.\s\\/:\*\?""<>\|\x01-\x1f]{1,32}(\.[^\.\s\\/:\*\?""<>\|\x01-\x1f]{1,32}){1,7}$")]
        public string PackageIdentifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous4
    {
        [Newtonsoft.Json.JsonProperty("PackageVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[^\\/:\*\?""<>\|\x01-\x1f]+$")]
        public string PackageVersion { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous5
    {
        [Newtonsoft.Json.JsonProperty("PackageLocale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([a-zA-Z]{2}|[iI]-[a-zA-Z]+|[xX]-[a-zA-Z]{1,8})(-[a-zA-Z]{1,8})*$")]
        public string PackageLocale { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Versions : VersionSchema
    {
        [Newtonsoft.Json.JsonProperty("Locales", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LocaleSchema> Locales { get; set; }

        [Newtonsoft.Json.JsonProperty("Installers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(1024)]
        public System.Collections.Generic.List<Installer> Installers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous6
    {
        [Newtonsoft.Json.JsonProperty("PackageVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[^\\/:\*\?""<>\|\x01-\x1f]+$")]
        public string PackageVersion { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous7
    {
        [Newtonsoft.Json.JsonProperty("SourceIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 3)]
        public string SourceIdentifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous8
    {
        [Newtonsoft.Json.JsonProperty("KeyWord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string KeyWord { get; set; }

        [Newtonsoft.Json.JsonProperty("MatchType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MatchType MatchType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625